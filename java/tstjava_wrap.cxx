/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.24
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif


#ifndef SWIG_TEMPLATE_DISAMBIGUATOR
#  if defined(__SUNPRO_CC) 
#    define SWIG_TEMPLATE_DISAMBIGUATOR template
#  else
#    define SWIG_TEMPLATE_DISAMBIGUATOR 
#  endif
#endif


#if defined(__GNUC__)
    typedef long long __int64; /*For gcc on Windows */
#endif
#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "javaTST.h"


#ifdef __cplusplus
extern "C" {
#endif

JNIEXPORT jstring JNICALL Java_com_lehuen_tst_tstJNI_get_1TST_1VERSION(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    result = (char *)(char *)TST_VERSION;
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jint JNICALL Java_com_lehuen_tst_tstJNI_get_1UNDEFINED_1INDEX(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int)(int)UNDEFINED_INDEX;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI_new_1TSTException(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    char *arg1 = (char *) 0 ;
    TSTException *result;
    
    (void)jenv;
    (void)jcls;
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return 0;
        }
    }
    result = (TSTException *)new TSTException(arg1);
    
    *(TSTException **)&jresult = result; 
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI_set_1TSTException_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    TSTException *arg1 = (TSTException *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(TSTException **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    {
        if (arg1->message) delete [] arg1->message;
        if (arg2) {
            arg1->message = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->message,arg2);
        } else {
            arg1->message = 0;
        }
    }
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jstring JNICALL Java_com_lehuen_tst_tstJNI_get_1TSTException_1message(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    TSTException *arg1 = (TSTException *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(TSTException **)&jarg1; 
    result = (char *) ((arg1)->message);
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI_delete_1TSTException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    TSTException *arg1 = (TSTException *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(TSTException **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI_new_1_1ObjectMemoryStorage(JNIEnv *jenv, jclass jcls, jint jarg1) {
    jlong jresult = 0 ;
    int arg1 ;
    memory_storage<jchar,jobject > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int)jarg1; 
    result = (memory_storage<jchar,jobject > *)new memory_storage<jchar,jobject >(arg1);
    
    *(memory_storage<jchar,jobject > **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI_delete_1_1ObjectMemoryStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    memory_storage<jchar,jobject > *arg1 = (memory_storage<jchar,jobject > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(memory_storage<jchar,jobject > **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI__1ObjectMemoryStorage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    memory_storage<jchar,jobject > *arg1 = (memory_storage<jchar,jobject > *) 0 ;
    int arg2 ;
    tst_node<jchar,jobject > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(memory_storage<jchar,jobject > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (tst_node<jchar,jobject > *)(arg1)->get(arg2);
    
    *(tst_node<jchar,jobject > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jobject JNICALL Java_com_lehuen_tst_tstJNI__1ObjectMemoryStorage_1store_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg3) {
    jobject jresult = 0 ;
    memory_storage<jchar,jobject > *arg1 = (memory_storage<jchar,jobject > *) 0 ;
    tst_node<jchar,jobject > *arg2 = (tst_node<jchar,jobject > *) 0 ;
    jobject arg3 ;
    jobject result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(memory_storage<jchar,jobject > **)&jarg1; 
    arg2 = *(tst_node<jchar,jobject > **)&jarg2; 
    arg3 = jarg3; 
    result = (arg1)->store_data(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_com_lehuen_tst_tstJNI__1ObjectMemoryStorage_1new_1node(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    memory_storage<jchar,jobject > *arg1 = (memory_storage<jchar,jobject > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(memory_storage<jchar,jobject > **)&jarg1; 
    result = (int)(arg1)->new_node();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI__1ObjectMemoryStorage_1delete_1node(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    memory_storage<jchar,jobject > *arg1 = (memory_storage<jchar,jobject > *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(memory_storage<jchar,jobject > **)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->delete_node(arg2);
    
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI__1ObjectMemoryStorage_1pack(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    memory_storage<jchar,jobject > *arg1 = (memory_storage<jchar,jobject > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(memory_storage<jchar,jobject > **)&jarg1; 
    (arg1)->pack();
    
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI__1ObjectMemoryStorage_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
    memory_storage<jchar,jobject > *arg1 = (memory_storage<jchar,jobject > *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    serializer<jchar,jobject > *arg3 = (serializer<jchar,jobject > *) 0 ;
    int *arg4 = (int *) 0 ;
    int *arg5 = (int *) 0 ;
    jobject *arg6 = (jobject *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(memory_storage<jchar,jobject > **)&jarg1; 
    arg2 = *(FILE **)&jarg2; 
    arg3 = *(serializer<jchar,jobject > **)&jarg3; 
    arg4 = *(int **)&jarg4; 
    arg5 = *(int **)&jarg5; 
    arg6 = *(jobject **)&jarg6; 
    (arg1)->read(arg2,arg3,arg4,arg5,arg6);
    
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI__1ObjectMemoryStorage_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jint jarg5, jobject jarg6) {
    memory_storage<jchar,jobject > *arg1 = (memory_storage<jchar,jobject > *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    serializer<jchar,jobject > *arg3 = (serializer<jchar,jobject > *) 0 ;
    int arg4 ;
    int arg5 ;
    jobject arg6 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(memory_storage<jchar,jobject > **)&jarg1; 
    arg2 = *(FILE **)&jarg2; 
    arg3 = *(serializer<jchar,jobject > **)&jarg3; 
    arg4 = (int)jarg4; 
    arg5 = (int)jarg5; 
    arg6 = jarg6; 
    (arg1)->write(arg2,arg3,arg4,arg5,arg6);
    
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI_new_1_1ObjectTST_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    jlong jresult = 0 ;
    ObjectMemoryStorage *arg1 = (ObjectMemoryStorage *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    serializer<jchar,jobject > *arg3 = (serializer<jchar,jobject > *) 0 ;
    tst<jchar,jobject,ObjectMemoryStorage > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ObjectMemoryStorage **)&jarg1; 
    arg2 = *(FILE **)&jarg2; 
    arg3 = *(serializer<jchar,jobject > **)&jarg3; 
    result = (tst<jchar,jobject,ObjectMemoryStorage > *)new tst<jchar,jobject,ObjectMemoryStorage >(arg1,arg2,arg3);
    
    *(tst<jchar,jobject,ObjectMemoryStorage > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI_new_1_1ObjectTST_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg2) {
    jlong jresult = 0 ;
    ObjectMemoryStorage *arg1 = (ObjectMemoryStorage *) 0 ;
    jobject arg2 ;
    tst<jchar,jobject,ObjectMemoryStorage > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ObjectMemoryStorage **)&jarg1; 
    arg2 = jarg2; 
    result = (tst<jchar,jobject,ObjectMemoryStorage > *)new tst<jchar,jobject,ObjectMemoryStorage >(arg1,arg2);
    
    *(tst<jchar,jobject,ObjectMemoryStorage > **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI_delete_1_1ObjectTST(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    tst<jchar,jobject,ObjectMemoryStorage > *arg1 = (tst<jchar,jobject,ObjectMemoryStorage > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<jchar,jobject,ObjectMemoryStorage > **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI__1ObjectTST_1pack(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    tst<jchar,jobject,ObjectMemoryStorage > *arg1 = (tst<jchar,jobject,ObjectMemoryStorage > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<jchar,jobject,ObjectMemoryStorage > **)&jarg1; 
    (arg1)->pack();
    
}


JNIEXPORT jobject JNICALL Java_com_lehuen_tst_tstJNI__1ObjectTST_1walk(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    jobject jresult = 0 ;
    tst<jchar,jobject,ObjectMemoryStorage > *arg1 = (tst<jchar,jobject,ObjectMemoryStorage > *) 0 ;
    filter<jchar,jobject > *arg2 = (filter<jchar,jobject > *) 0 ;
    tst_action<jchar,jobject > *arg3 = (tst_action<jchar,jobject > *) 0 ;
    jobject result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<jchar,jobject,ObjectMemoryStorage > **)&jarg1; 
    arg2 = *(filter<jchar,jobject > **)&jarg2; 
    arg3 = *(tst_action<jchar,jobject > **)&jarg3; 
    result = (arg1)->walk(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


JNIEXPORT jobject JNICALL Java_com_lehuen_tst_tstJNI__1ObjectTST_1almost(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg4, jlong jarg5, jlong jarg6) {
    jobject jresult = 0 ;
    tst<jchar,jobject,ObjectMemoryStorage > *arg1 = (tst<jchar,jobject,ObjectMemoryStorage > *) 0 ;
    jchar *arg2 = (jchar *) 0 ;
    int arg3 ;
    int arg4 ;
    filter<jchar,jobject > *arg5 = (filter<jchar,jobject > *) 0 ;
    tst_action<jchar,jobject > *arg6 = (tst_action<jchar,jobject > *) 0 ;
    jobject result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<jchar,jobject,ObjectMemoryStorage > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (jchar*)jenv->GetStringChars((jstring)jarg2, 0);
            if (!arg2) return 0;
            arg3 = jenv->GetStringLength((jstring)jarg2);
        }
    }
    arg4 = (int)jarg4; 
    arg5 = *(filter<jchar,jobject > **)&jarg5; 
    arg6 = *(tst_action<jchar,jobject > **)&jarg6; 
    result = (arg1)->almost(arg2,arg3,arg4,arg5,arg6);
    
    jresult = result; 
    {
        if (arg2) jenv->ReleaseStringChars((jstring)jarg2, arg2);
    }
    return jresult;
}


JNIEXPORT jobject JNICALL Java_com_lehuen_tst_tstJNI__1ObjectTST_1common_1prefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg4, jlong jarg5) {
    jobject jresult = 0 ;
    tst<jchar,jobject,ObjectMemoryStorage > *arg1 = (tst<jchar,jobject,ObjectMemoryStorage > *) 0 ;
    jchar *arg2 = (jchar *) 0 ;
    int arg3 ;
    filter<jchar,jobject > *arg4 = (filter<jchar,jobject > *) 0 ;
    tst_action<jchar,jobject > *arg5 = (tst_action<jchar,jobject > *) 0 ;
    jobject result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<jchar,jobject,ObjectMemoryStorage > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (jchar*)jenv->GetStringChars((jstring)jarg2, 0);
            if (!arg2) return 0;
            arg3 = jenv->GetStringLength((jstring)jarg2);
        }
    }
    arg4 = *(filter<jchar,jobject > **)&jarg4; 
    arg5 = *(tst_action<jchar,jobject > **)&jarg5; 
    result = (arg1)->common_prefix(arg2,arg3,arg4,arg5);
    
    jresult = result; 
    {
        if (arg2) jenv->ReleaseStringChars((jstring)jarg2, arg2);
    }
    return jresult;
}


JNIEXPORT jobject JNICALL Java_com_lehuen_tst_tstJNI__1ObjectTST_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jobject jresult = 0 ;
    tst<jchar,jobject,ObjectMemoryStorage > *arg1 = (tst<jchar,jobject,ObjectMemoryStorage > *) 0 ;
    jchar *arg2 = (jchar *) 0 ;
    int arg3 ;
    jobject result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<jchar,jobject,ObjectMemoryStorage > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (jchar*)jenv->GetStringChars((jstring)jarg2, 0);
            if (!arg2) return 0;
            arg3 = jenv->GetStringLength((jstring)jarg2);
        }
    }
    result = (arg1)->get(arg2,arg3);
    
    jresult = result; 
    {
        if (arg2) jenv->ReleaseStringChars((jstring)jarg2, arg2);
    }
    return jresult;
}


JNIEXPORT jobject JNICALL Java_com_lehuen_tst_tstJNI__1ObjectTST_1get_1or_1build(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg4) {
    jobject jresult = 0 ;
    tst<jchar,jobject,ObjectMemoryStorage > *arg1 = (tst<jchar,jobject,ObjectMemoryStorage > *) 0 ;
    jchar *arg2 = (jchar *) 0 ;
    int arg3 ;
    filter<jchar,jobject > *arg4 = (filter<jchar,jobject > *) 0 ;
    jobject result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<jchar,jobject,ObjectMemoryStorage > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (jchar*)jenv->GetStringChars((jstring)jarg2, 0);
            if (!arg2) return 0;
            arg3 = jenv->GetStringLength((jstring)jarg2);
        }
    }
    arg4 = *(filter<jchar,jobject > **)&jarg4; 
    result = (arg1)->get_or_build(arg2,arg3,arg4);
    
    jresult = result; 
    {
        if (arg2) jenv->ReleaseStringChars((jstring)jarg2, arg2);
    }
    return jresult;
}


JNIEXPORT jobject JNICALL Java_com_lehuen_tst_tstJNI__1ObjectTST_1put(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jobject jarg4) {
    jobject jresult = 0 ;
    tst<jchar,jobject,ObjectMemoryStorage > *arg1 = (tst<jchar,jobject,ObjectMemoryStorage > *) 0 ;
    jchar *arg2 = (jchar *) 0 ;
    int arg3 ;
    jobject arg4 ;
    jobject result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<jchar,jobject,ObjectMemoryStorage > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (jchar*)jenv->GetStringChars((jstring)jarg2, 0);
            if (!arg2) return 0;
            arg3 = jenv->GetStringLength((jstring)jarg2);
        }
    }
    arg4 = jarg4; 
    result = (arg1)->put(arg2,arg3,arg4);
    
    jresult = result; 
    {
        if (arg2) jenv->ReleaseStringChars((jstring)jarg2, arg2);
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI__1ObjectTST_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    tst<jchar,jobject,ObjectMemoryStorage > *arg1 = (tst<jchar,jobject,ObjectMemoryStorage > *) 0 ;
    jchar *arg2 = (jchar *) 0 ;
    int arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<jchar,jobject,ObjectMemoryStorage > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (jchar*)jenv->GetStringChars((jstring)jarg2, 0);
            if (!arg2) return ;
            arg3 = jenv->GetStringLength((jstring)jarg2);
        }
    }
    (arg1)->remove(arg2,arg3);
    
    {
        if (arg2) jenv->ReleaseStringChars((jstring)jarg2, arg2);
    }
}


JNIEXPORT jint JNICALL Java_com_lehuen_tst_tstJNI__1ObjectTST_1get_1maximum_1key_1length(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    tst<jchar,jobject,ObjectMemoryStorage > *arg1 = (tst<jchar,jobject,ObjectMemoryStorage > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<jchar,jobject,ObjectMemoryStorage > **)&jarg1; 
    result = (int)(arg1)->get_maximum_key_length();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI__1ObjectTST_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    tst<jchar,jobject,ObjectMemoryStorage > *arg1 = (tst<jchar,jobject,ObjectMemoryStorage > *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    serializer<jchar,jobject > *arg3 = (serializer<jchar,jobject > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<jchar,jobject,ObjectMemoryStorage > **)&jarg1; 
    arg2 = *(FILE **)&jarg2; 
    arg3 = *(serializer<jchar,jobject > **)&jarg3; 
    (arg1)->write(arg2,arg3);
    
}


JNIEXPORT jobject JNICALL Java_com_lehuen_tst_tstJNI__1ObjectTST_1scan(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg4) {
    jobject jresult = 0 ;
    tst<jchar,jobject,ObjectMemoryStorage > *arg1 = (tst<jchar,jobject,ObjectMemoryStorage > *) 0 ;
    jchar *arg2 = (jchar *) 0 ;
    int arg3 ;
    tst_action<jchar,jobject > *arg4 = (tst_action<jchar,jobject > *) 0 ;
    jobject result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<jchar,jobject,ObjectMemoryStorage > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (jchar*)jenv->GetStringChars((jstring)jarg2, 0);
            if (!arg2) return 0;
            arg3 = jenv->GetStringLength((jstring)jarg2);
        }
    }
    arg4 = *(tst_action<jchar,jobject > **)&jarg4; 
    result = (arg1)->scan(arg2,arg3,arg4);
    
    jresult = result; 
    {
        if (arg2) jenv->ReleaseStringChars((jstring)jarg2, arg2);
    }
    return jresult;
}


JNIEXPORT jobject JNICALL Java_com_lehuen_tst_tstJNI__1ObjectTST_1scan_1with_1stop_1chars(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg4, jlong jarg6) {
    jobject jresult = 0 ;
    tst<jchar,jobject,ObjectMemoryStorage > *arg1 = (tst<jchar,jobject,ObjectMemoryStorage > *) 0 ;
    jchar *arg2 = (jchar *) 0 ;
    int arg3 ;
    jchar *arg4 = (jchar *) 0 ;
    int arg5 ;
    tst_action<jchar,jobject > *arg6 = (tst_action<jchar,jobject > *) 0 ;
    jobject result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<jchar,jobject,ObjectMemoryStorage > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (jchar*)jenv->GetStringChars((jstring)jarg2, 0);
            if (!arg2) return 0;
            arg3 = jenv->GetStringLength((jstring)jarg2);
        }
    }
    {
        arg4 = 0;
        if (jarg4) {
            arg4 = (jchar*)jenv->GetStringChars((jstring)jarg4, 0);
            if (!arg4) return 0;
            arg5 = jenv->GetStringLength((jstring)jarg4);
        }
    }
    arg6 = *(tst_action<jchar,jobject > **)&jarg6; 
    result = (arg1)->scan_with_stop_chars(arg2,arg3,arg4,arg5,arg6);
    
    jresult = result; 
    {
        if (arg2) jenv->ReleaseStringChars((jstring)jarg2, arg2);
    }
    {
        if (arg4) jenv->ReleaseStringChars((jstring)jarg4, arg4);
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI_delete_1_1ObjectAction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    tst_action<jchar,jobject > *arg1 = (tst_action<jchar,jobject > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst_action<jchar,jobject > **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI__1ObjectAction_1perform(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg4, jobject jarg5) {
    tst_action<jchar,jobject > *arg1 = (tst_action<jchar,jobject > *) 0 ;
    jchar *arg2 = (jchar *) 0 ;
    int arg3 ;
    int arg4 ;
    jobject arg5 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst_action<jchar,jobject > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (jchar*)jenv->GetStringChars((jstring)jarg2, 0);
            if (!arg2) return ;
            arg3 = jenv->GetStringLength((jstring)jarg2);
        }
    }
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    (arg1)->perform(arg2,arg3,arg4,arg5);
    
    {
        if (arg2) jenv->ReleaseStringChars((jstring)jarg2, arg2);
    }
}


JNIEXPORT jobject JNICALL Java_com_lehuen_tst_tstJNI__1ObjectAction_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jobject jresult = 0 ;
    tst_action<jchar,jobject > *arg1 = (tst_action<jchar,jobject > *) 0 ;
    jobject result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst_action<jchar,jobject > **)&jarg1; 
    result = (arg1)->result();
    
    jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI_delete_1_1ObjectFilter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    filter<jchar,jobject > *arg1 = (filter<jchar,jobject > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(filter<jchar,jobject > **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jobject JNICALL Java_com_lehuen_tst_tstJNI__1ObjectFilter_1perform(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg4, jobject jarg5) {
    jobject jresult = 0 ;
    filter<jchar,jobject > *arg1 = (filter<jchar,jobject > *) 0 ;
    jchar *arg2 = (jchar *) 0 ;
    int arg3 ;
    int arg4 ;
    jobject arg5 ;
    jobject result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(filter<jchar,jobject > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (jchar*)jenv->GetStringChars((jstring)jarg2, 0);
            if (!arg2) return 0;
            arg3 = jenv->GetStringLength((jstring)jarg2);
        }
    }
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    result = (arg1)->perform(arg2,arg3,arg4,arg5);
    
    jresult = result; 
    {
        if (arg2) jenv->ReleaseStringChars((jstring)jarg2, arg2);
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI_delete_1_1ObjectSerializer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    serializer<jchar,jobject > *arg1 = (serializer<jchar,jobject > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(serializer<jchar,jobject > **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI__1ObjectSerializer_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg3) {
    serializer<jchar,jobject > *arg1 = (serializer<jchar,jobject > *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    jobject arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(serializer<jchar,jobject > **)&jarg1; 
    arg2 = *(FILE **)&jarg2; 
    arg3 = jarg3; 
    (arg1)->write(arg2,arg3);
    
}


JNIEXPORT jobject JNICALL Java_com_lehuen_tst_tstJNI__1ObjectSerializer_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jobject jresult = 0 ;
    serializer<jchar,jobject > *arg1 = (serializer<jchar,jobject > *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    jobject result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(serializer<jchar,jobject > **)&jarg1; 
    arg2 = *(FILE **)&jarg2; 
    result = (arg1)->read(arg2);
    
    jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI_new_1_1LongMemoryStorage(JNIEnv *jenv, jclass jcls, jint jarg1) {
    jlong jresult = 0 ;
    int arg1 ;
    memory_storage<jchar,jlong > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int)jarg1; 
    result = (memory_storage<jchar,jlong > *)new memory_storage<jchar,jlong >(arg1);
    
    *(memory_storage<jchar,jlong > **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI_delete_1_1LongMemoryStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    memory_storage<jchar,jlong > *arg1 = (memory_storage<jchar,jlong > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(memory_storage<jchar,jlong > **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI__1LongMemoryStorage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    memory_storage<jchar,jlong > *arg1 = (memory_storage<jchar,jlong > *) 0 ;
    int arg2 ;
    tst_node<jchar,jlong > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(memory_storage<jchar,jlong > **)&jarg1; 
    arg2 = (int)jarg2; 
    result = (tst_node<jchar,jlong > *)(arg1)->get(arg2);
    
    *(tst_node<jchar,jlong > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI__1LongMemoryStorage_1store_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    jlong jresult = 0 ;
    memory_storage<jchar,jlong > *arg1 = (memory_storage<jchar,jlong > *) 0 ;
    tst_node<jchar,jlong > *arg2 = (tst_node<jchar,jlong > *) 0 ;
    jlong arg3 ;
    jlong result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(memory_storage<jchar,jlong > **)&jarg1; 
    arg2 = *(tst_node<jchar,jlong > **)&jarg2; 
    arg3 = jarg3; 
    result = (arg1)->store_data(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_com_lehuen_tst_tstJNI__1LongMemoryStorage_1new_1node(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    memory_storage<jchar,jlong > *arg1 = (memory_storage<jchar,jlong > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(memory_storage<jchar,jlong > **)&jarg1; 
    result = (int)(arg1)->new_node();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI__1LongMemoryStorage_1delete_1node(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    memory_storage<jchar,jlong > *arg1 = (memory_storage<jchar,jlong > *) 0 ;
    int arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(memory_storage<jchar,jlong > **)&jarg1; 
    arg2 = (int)jarg2; 
    (arg1)->delete_node(arg2);
    
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI__1LongMemoryStorage_1pack(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    memory_storage<jchar,jlong > *arg1 = (memory_storage<jchar,jlong > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(memory_storage<jchar,jlong > **)&jarg1; 
    (arg1)->pack();
    
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI__1LongMemoryStorage_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
    memory_storage<jchar,jlong > *arg1 = (memory_storage<jchar,jlong > *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    serializer<jchar,jlong > *arg3 = (serializer<jchar,jlong > *) 0 ;
    int *arg4 = (int *) 0 ;
    int *arg5 = (int *) 0 ;
    jlong *arg6 = (jlong *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(memory_storage<jchar,jlong > **)&jarg1; 
    arg2 = *(FILE **)&jarg2; 
    arg3 = *(serializer<jchar,jlong > **)&jarg3; 
    arg4 = *(int **)&jarg4; 
    arg5 = *(int **)&jarg5; 
    arg6 = *(jlong **)&jarg6; 
    (arg1)->read(arg2,arg3,arg4,arg5,arg6);
    
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI__1LongMemoryStorage_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jint jarg4, jint jarg5, jlong jarg6) {
    memory_storage<jchar,jlong > *arg1 = (memory_storage<jchar,jlong > *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    serializer<jchar,jlong > *arg3 = (serializer<jchar,jlong > *) 0 ;
    int arg4 ;
    int arg5 ;
    jlong arg6 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(memory_storage<jchar,jlong > **)&jarg1; 
    arg2 = *(FILE **)&jarg2; 
    arg3 = *(serializer<jchar,jlong > **)&jarg3; 
    arg4 = (int)jarg4; 
    arg5 = (int)jarg5; 
    arg6 = jarg6; 
    (arg1)->write(arg2,arg3,arg4,arg5,arg6);
    
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI_new_1_1LongTST_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    jlong jresult = 0 ;
    java_long_memory_storage *arg1 = (java_long_memory_storage *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    serializer<jchar,jlong > *arg3 = (serializer<jchar,jlong > *) 0 ;
    tst<jchar,jlong,java_long_memory_storage > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(java_long_memory_storage **)&jarg1; 
    arg2 = *(FILE **)&jarg2; 
    arg3 = *(serializer<jchar,jlong > **)&jarg3; 
    result = (tst<jchar,jlong,java_long_memory_storage > *)new tst<jchar,jlong,java_long_memory_storage >(arg1,arg2,arg3);
    
    *(tst<jchar,jlong,java_long_memory_storage > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI_new_1_1LongTST_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    java_long_memory_storage *arg1 = (java_long_memory_storage *) 0 ;
    jlong arg2 ;
    tst<jchar,jlong,java_long_memory_storage > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(java_long_memory_storage **)&jarg1; 
    arg2 = jarg2; 
    result = (tst<jchar,jlong,java_long_memory_storage > *)new tst<jchar,jlong,java_long_memory_storage >(arg1,arg2);
    
    *(tst<jchar,jlong,java_long_memory_storage > **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI_delete_1_1LongTST(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    tst<jchar,jlong,java_long_memory_storage > *arg1 = (tst<jchar,jlong,java_long_memory_storage > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<jchar,jlong,java_long_memory_storage > **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI__1LongTST_1pack(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    tst<jchar,jlong,java_long_memory_storage > *arg1 = (tst<jchar,jlong,java_long_memory_storage > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<jchar,jlong,java_long_memory_storage > **)&jarg1; 
    (arg1)->pack();
    
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI__1LongTST_1walk(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    jlong jresult = 0 ;
    tst<jchar,jlong,java_long_memory_storage > *arg1 = (tst<jchar,jlong,java_long_memory_storage > *) 0 ;
    filter<jchar,jlong > *arg2 = (filter<jchar,jlong > *) 0 ;
    tst_action<jchar,jlong > *arg3 = (tst_action<jchar,jlong > *) 0 ;
    jlong result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<jchar,jlong,java_long_memory_storage > **)&jarg1; 
    arg2 = *(filter<jchar,jlong > **)&jarg2; 
    arg3 = *(tst_action<jchar,jlong > **)&jarg3; 
    result = (arg1)->walk(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI__1LongTST_1almost(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg4, jlong jarg5, jlong jarg6) {
    jlong jresult = 0 ;
    tst<jchar,jlong,java_long_memory_storage > *arg1 = (tst<jchar,jlong,java_long_memory_storage > *) 0 ;
    jchar *arg2 = (jchar *) 0 ;
    int arg3 ;
    int arg4 ;
    filter<jchar,jlong > *arg5 = (filter<jchar,jlong > *) 0 ;
    tst_action<jchar,jlong > *arg6 = (tst_action<jchar,jlong > *) 0 ;
    jlong result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<jchar,jlong,java_long_memory_storage > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (jchar*)jenv->GetStringChars((jstring)jarg2, 0);
            if (!arg2) return 0;
            arg3 = jenv->GetStringLength((jstring)jarg2);
        }
    }
    arg4 = (int)jarg4; 
    arg5 = *(filter<jchar,jlong > **)&jarg5; 
    arg6 = *(tst_action<jchar,jlong > **)&jarg6; 
    result = (arg1)->almost(arg2,arg3,arg4,arg5,arg6);
    
    jresult = result; 
    {
        if (arg2) jenv->ReleaseStringChars((jstring)jarg2, arg2);
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI__1LongTST_1common_1prefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg4, jlong jarg5) {
    jlong jresult = 0 ;
    tst<jchar,jlong,java_long_memory_storage > *arg1 = (tst<jchar,jlong,java_long_memory_storage > *) 0 ;
    jchar *arg2 = (jchar *) 0 ;
    int arg3 ;
    filter<jchar,jlong > *arg4 = (filter<jchar,jlong > *) 0 ;
    tst_action<jchar,jlong > *arg5 = (tst_action<jchar,jlong > *) 0 ;
    jlong result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<jchar,jlong,java_long_memory_storage > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (jchar*)jenv->GetStringChars((jstring)jarg2, 0);
            if (!arg2) return 0;
            arg3 = jenv->GetStringLength((jstring)jarg2);
        }
    }
    arg4 = *(filter<jchar,jlong > **)&jarg4; 
    arg5 = *(tst_action<jchar,jlong > **)&jarg5; 
    result = (arg1)->common_prefix(arg2,arg3,arg4,arg5);
    
    jresult = result; 
    {
        if (arg2) jenv->ReleaseStringChars((jstring)jarg2, arg2);
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI__1LongTST_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    tst<jchar,jlong,java_long_memory_storage > *arg1 = (tst<jchar,jlong,java_long_memory_storage > *) 0 ;
    jchar *arg2 = (jchar *) 0 ;
    int arg3 ;
    jlong result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<jchar,jlong,java_long_memory_storage > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (jchar*)jenv->GetStringChars((jstring)jarg2, 0);
            if (!arg2) return 0;
            arg3 = jenv->GetStringLength((jstring)jarg2);
        }
    }
    result = (arg1)->get(arg2,arg3);
    
    jresult = result; 
    {
        if (arg2) jenv->ReleaseStringChars((jstring)jarg2, arg2);
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI__1LongTST_1get_1or_1build(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg4) {
    jlong jresult = 0 ;
    tst<jchar,jlong,java_long_memory_storage > *arg1 = (tst<jchar,jlong,java_long_memory_storage > *) 0 ;
    jchar *arg2 = (jchar *) 0 ;
    int arg3 ;
    filter<jchar,jlong > *arg4 = (filter<jchar,jlong > *) 0 ;
    jlong result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<jchar,jlong,java_long_memory_storage > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (jchar*)jenv->GetStringChars((jstring)jarg2, 0);
            if (!arg2) return 0;
            arg3 = jenv->GetStringLength((jstring)jarg2);
        }
    }
    arg4 = *(filter<jchar,jlong > **)&jarg4; 
    result = (arg1)->get_or_build(arg2,arg3,arg4);
    
    jresult = result; 
    {
        if (arg2) jenv->ReleaseStringChars((jstring)jarg2, arg2);
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI__1LongTST_1put(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg4) {
    jlong jresult = 0 ;
    tst<jchar,jlong,java_long_memory_storage > *arg1 = (tst<jchar,jlong,java_long_memory_storage > *) 0 ;
    jchar *arg2 = (jchar *) 0 ;
    int arg3 ;
    jlong arg4 ;
    jlong result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<jchar,jlong,java_long_memory_storage > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (jchar*)jenv->GetStringChars((jstring)jarg2, 0);
            if (!arg2) return 0;
            arg3 = jenv->GetStringLength((jstring)jarg2);
        }
    }
    arg4 = jarg4; 
    result = (arg1)->put(arg2,arg3,arg4);
    
    jresult = result; 
    {
        if (arg2) jenv->ReleaseStringChars((jstring)jarg2, arg2);
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI__1LongTST_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    tst<jchar,jlong,java_long_memory_storage > *arg1 = (tst<jchar,jlong,java_long_memory_storage > *) 0 ;
    jchar *arg2 = (jchar *) 0 ;
    int arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<jchar,jlong,java_long_memory_storage > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (jchar*)jenv->GetStringChars((jstring)jarg2, 0);
            if (!arg2) return ;
            arg3 = jenv->GetStringLength((jstring)jarg2);
        }
    }
    (arg1)->remove(arg2,arg3);
    
    {
        if (arg2) jenv->ReleaseStringChars((jstring)jarg2, arg2);
    }
}


JNIEXPORT jint JNICALL Java_com_lehuen_tst_tstJNI__1LongTST_1get_1maximum_1key_1length(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    tst<jchar,jlong,java_long_memory_storage > *arg1 = (tst<jchar,jlong,java_long_memory_storage > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<jchar,jlong,java_long_memory_storage > **)&jarg1; 
    result = (int)(arg1)->get_maximum_key_length();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI__1LongTST_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    tst<jchar,jlong,java_long_memory_storage > *arg1 = (tst<jchar,jlong,java_long_memory_storage > *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    serializer<jchar,jlong > *arg3 = (serializer<jchar,jlong > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<jchar,jlong,java_long_memory_storage > **)&jarg1; 
    arg2 = *(FILE **)&jarg2; 
    arg3 = *(serializer<jchar,jlong > **)&jarg3; 
    (arg1)->write(arg2,arg3);
    
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI__1LongTST_1scan(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg4) {
    jlong jresult = 0 ;
    tst<jchar,jlong,java_long_memory_storage > *arg1 = (tst<jchar,jlong,java_long_memory_storage > *) 0 ;
    jchar *arg2 = (jchar *) 0 ;
    int arg3 ;
    tst_action<jchar,jlong > *arg4 = (tst_action<jchar,jlong > *) 0 ;
    jlong result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<jchar,jlong,java_long_memory_storage > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (jchar*)jenv->GetStringChars((jstring)jarg2, 0);
            if (!arg2) return 0;
            arg3 = jenv->GetStringLength((jstring)jarg2);
        }
    }
    arg4 = *(tst_action<jchar,jlong > **)&jarg4; 
    result = (arg1)->scan(arg2,arg3,arg4);
    
    jresult = result; 
    {
        if (arg2) jenv->ReleaseStringChars((jstring)jarg2, arg2);
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI__1LongTST_1scan_1with_1stop_1chars(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg4, jlong jarg6) {
    jlong jresult = 0 ;
    tst<jchar,jlong,java_long_memory_storage > *arg1 = (tst<jchar,jlong,java_long_memory_storage > *) 0 ;
    jchar *arg2 = (jchar *) 0 ;
    int arg3 ;
    jchar *arg4 = (jchar *) 0 ;
    int arg5 ;
    tst_action<jchar,jlong > *arg6 = (tst_action<jchar,jlong > *) 0 ;
    jlong result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<jchar,jlong,java_long_memory_storage > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (jchar*)jenv->GetStringChars((jstring)jarg2, 0);
            if (!arg2) return 0;
            arg3 = jenv->GetStringLength((jstring)jarg2);
        }
    }
    {
        arg4 = 0;
        if (jarg4) {
            arg4 = (jchar*)jenv->GetStringChars((jstring)jarg4, 0);
            if (!arg4) return 0;
            arg5 = jenv->GetStringLength((jstring)jarg4);
        }
    }
    arg6 = *(tst_action<jchar,jlong > **)&jarg6; 
    result = (arg1)->scan_with_stop_chars(arg2,arg3,arg4,arg5,arg6);
    
    jresult = result; 
    {
        if (arg2) jenv->ReleaseStringChars((jstring)jarg2, arg2);
    }
    {
        if (arg4) jenv->ReleaseStringChars((jstring)jarg4, arg4);
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI_delete_1_1LongAction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    tst_action<jchar,jlong > *arg1 = (tst_action<jchar,jlong > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst_action<jchar,jlong > **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI__1LongAction_1perform(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg4, jlong jarg5) {
    tst_action<jchar,jlong > *arg1 = (tst_action<jchar,jlong > *) 0 ;
    jchar *arg2 = (jchar *) 0 ;
    int arg3 ;
    int arg4 ;
    jlong arg5 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst_action<jchar,jlong > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (jchar*)jenv->GetStringChars((jstring)jarg2, 0);
            if (!arg2) return ;
            arg3 = jenv->GetStringLength((jstring)jarg2);
        }
    }
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    (arg1)->perform(arg2,arg3,arg4,arg5);
    
    {
        if (arg2) jenv->ReleaseStringChars((jstring)jarg2, arg2);
    }
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI__1LongAction_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    tst_action<jchar,jlong > *arg1 = (tst_action<jchar,jlong > *) 0 ;
    jlong result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst_action<jchar,jlong > **)&jarg1; 
    result = (arg1)->result();
    
    jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI_delete_1_1LongFilter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    filter<jchar,jlong > *arg1 = (filter<jchar,jlong > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(filter<jchar,jlong > **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI__1LongFilter_1perform(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg4, jlong jarg5) {
    jlong jresult = 0 ;
    filter<jchar,jlong > *arg1 = (filter<jchar,jlong > *) 0 ;
    jchar *arg2 = (jchar *) 0 ;
    int arg3 ;
    int arg4 ;
    jlong arg5 ;
    jlong result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(filter<jchar,jlong > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (jchar*)jenv->GetStringChars((jstring)jarg2, 0);
            if (!arg2) return 0;
            arg3 = jenv->GetStringLength((jstring)jarg2);
        }
    }
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    result = (arg1)->perform(arg2,arg3,arg4,arg5);
    
    jresult = result; 
    {
        if (arg2) jenv->ReleaseStringChars((jstring)jarg2, arg2);
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI_delete_1_1LongSerializer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    serializer<jchar,jlong > *arg1 = (serializer<jchar,jlong > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(serializer<jchar,jlong > **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI__1LongSerializer_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    serializer<jchar,jlong > *arg1 = (serializer<jchar,jlong > *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    jlong arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(serializer<jchar,jlong > **)&jarg1; 
    arg2 = *(FILE **)&jarg2; 
    arg3 = jarg3; 
    (arg1)->write(arg2,arg3);
    
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI__1LongSerializer_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    serializer<jchar,jlong > *arg1 = (serializer<jchar,jlong > *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    jlong result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(serializer<jchar,jlong > **)&jarg1; 
    arg2 = *(FILE **)&jarg2; 
    result = (arg1)->read(arg2);
    
    jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI_new_1ObjectMemoryStorage(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    int arg1 ;
    JNIEnv *arg2 = (JNIEnv *) 0 ;
    ObjectMemoryStorage *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int)jarg1; 
    arg2 = *(JNIEnv **)&jarg2; 
    result = (ObjectMemoryStorage *)new ObjectMemoryStorage(arg1,arg2);
    
    *(ObjectMemoryStorage **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI_delete_1ObjectMemoryStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ObjectMemoryStorage *arg1 = (ObjectMemoryStorage *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ObjectMemoryStorage **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jobject JNICALL Java_com_lehuen_tst_tstJNI_ObjectMemoryStorage_1store_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg3) {
    jobject jresult = 0 ;
    ObjectMemoryStorage *arg1 = (ObjectMemoryStorage *) 0 ;
    tst_node<jchar,jobject > *arg2 = (tst_node<jchar,jobject > *) 0 ;
    jobject arg3 ;
    jobject result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ObjectMemoryStorage **)&jarg1; 
    arg2 = *(tst_node<jchar,jobject > **)&jarg2; 
    arg3 = jarg3; 
    result = (arg1)->store_data(arg2,arg3);
    
    jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI_new_1ObjectTST(JNIEnv *jenv, jclass jcls, jint jarg1, jobject jarg2) {
    jlong jresult = 0 ;
    int arg1 ;
    jobject arg2 ;
    JNIEnv *arg3 = (JNIEnv *) 0 ;
    ObjectTST *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int)jarg1; 
    {
        arg2 = (jobject)jarg2;
        arg3 = jenv;
    }
    result = (ObjectTST *)new ObjectTST(arg1,arg2,arg3);
    
    *(ObjectTST **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI_delete_1ObjectTST(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ObjectTST *arg1 = (ObjectTST *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ObjectTST **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI_new_1ObjectAction(JNIEnv *jenv, jclass jcls, jobject jarg1, jstring jarg2, jstring jarg3) {
    jlong jresult = 0 ;
    jobject arg1 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    JNIEnv *arg4 = (JNIEnv *) 0 ;
    ObjectAction *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    {
        arg3 = 0;
        if (jarg3) {
            arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
            if (!arg3) return 0;
        }
        arg4 = jenv;
    }
    result = (ObjectAction *)new ObjectAction(arg1,arg2,arg3,arg4);
    
    *(ObjectAction **)&jresult = result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    {
        if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI_delete_1ObjectAction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ObjectAction *arg1 = (ObjectAction *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ObjectAction **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI_ObjectAction_1perform(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg4, jobject jarg5) {
    ObjectAction *arg1 = (ObjectAction *) 0 ;
    jchar *arg2 = (jchar *) 0 ;
    int arg3 ;
    int arg4 ;
    jobject arg5 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ObjectAction **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (jchar*)jenv->GetStringChars((jstring)jarg2, 0);
            if (!arg2) return ;
            arg3 = jenv->GetStringLength((jstring)jarg2);
        }
    }
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    (arg1)->perform(arg2,arg3,arg4,arg5);
    
    {
        if (arg2) jenv->ReleaseStringChars((jstring)jarg2, arg2);
    }
}


JNIEXPORT jobject JNICALL Java_com_lehuen_tst_tstJNI_ObjectAction_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jobject jresult = 0 ;
    ObjectAction *arg1 = (ObjectAction *) 0 ;
    jobject result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ObjectAction **)&jarg1; 
    result = (arg1)->result();
    
    jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI_new_1ObjectFilter(JNIEnv *jenv, jclass jcls, jobject jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    jobject arg1 ;
    char *arg2 = (char *) 0 ;
    JNIEnv *arg3 = (JNIEnv *) 0 ;
    ObjectFilter *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
        arg3 = jenv;
    }
    result = (ObjectFilter *)new ObjectFilter(arg1,arg2,arg3);
    
    *(ObjectFilter **)&jresult = result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI_delete_1ObjectFilter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ObjectFilter *arg1 = (ObjectFilter *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ObjectFilter **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jobject JNICALL Java_com_lehuen_tst_tstJNI_ObjectFilter_1perform(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg4, jobject jarg5) {
    jobject jresult = 0 ;
    ObjectFilter *arg1 = (ObjectFilter *) 0 ;
    jchar *arg2 = (jchar *) 0 ;
    int arg3 ;
    int arg4 ;
    jobject arg5 ;
    jobject result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ObjectFilter **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (jchar*)jenv->GetStringChars((jstring)jarg2, 0);
            if (!arg2) return 0;
            arg3 = jenv->GetStringLength((jstring)jarg2);
        }
    }
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    result = (arg1)->perform(arg2,arg3,arg4,arg5);
    
    jresult = result; 
    {
        if (arg2) jenv->ReleaseStringChars((jstring)jarg2, arg2);
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI_ObjectSerializer_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg3) {
    ObjectSerializer *arg1 = (ObjectSerializer *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    jobject arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ObjectSerializer **)&jarg1; 
    arg2 = *(FILE **)&jarg2; 
    arg3 = jarg3; 
    (arg1)->write(arg2,arg3);
    
}


JNIEXPORT jobject JNICALL Java_com_lehuen_tst_tstJNI_ObjectSerializer_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jobject jresult = 0 ;
    ObjectSerializer *arg1 = (ObjectSerializer *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    jobject result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ObjectSerializer **)&jarg1; 
    arg2 = *(FILE **)&jarg2; 
    result = (arg1)->read(arg2);
    
    jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI_new_1ObjectSerializer(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    ObjectSerializer *result;
    
    (void)jenv;
    (void)jcls;
    result = (ObjectSerializer *)new ObjectSerializer();
    
    *(ObjectSerializer **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI_delete_1ObjectSerializer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    ObjectSerializer *arg1 = (ObjectSerializer *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(ObjectSerializer **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI_new_1LongTST(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    int arg1 ;
    jlong arg2 ;
    LongTST *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int)jarg1; 
    arg2 = jarg2; 
    result = (LongTST *)new LongTST(arg1,arg2);
    
    *(LongTST **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI_delete_1LongTST(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    LongTST *arg1 = (LongTST *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(LongTST **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI_new_1LongAction(JNIEnv *jenv, jclass jcls, jobject jarg1, jstring jarg2, jstring jarg3) {
    jlong jresult = 0 ;
    jobject arg1 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    JNIEnv *arg4 = (JNIEnv *) 0 ;
    LongAction *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    {
        arg3 = 0;
        if (jarg3) {
            arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
            if (!arg3) return 0;
        }
        arg4 = jenv;
    }
    result = (LongAction *)new LongAction(arg1,arg2,arg3,arg4);
    
    *(LongAction **)&jresult = result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    {
        if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI_delete_1LongAction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    LongAction *arg1 = (LongAction *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(LongAction **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI_LongAction_1perform(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg4, jlong jarg5) {
    LongAction *arg1 = (LongAction *) 0 ;
    jchar *arg2 = (jchar *) 0 ;
    int arg3 ;
    int arg4 ;
    jlong arg5 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(LongAction **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (jchar*)jenv->GetStringChars((jstring)jarg2, 0);
            if (!arg2) return ;
            arg3 = jenv->GetStringLength((jstring)jarg2);
        }
    }
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    (arg1)->perform(arg2,arg3,arg4,arg5);
    
    {
        if (arg2) jenv->ReleaseStringChars((jstring)jarg2, arg2);
    }
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI_LongAction_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    LongAction *arg1 = (LongAction *) 0 ;
    jlong result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(LongAction **)&jarg1; 
    result = (arg1)->result();
    
    jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI_new_1LongFilter(JNIEnv *jenv, jclass jcls, jobject jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    jobject arg1 ;
    char *arg2 = (char *) 0 ;
    JNIEnv *arg3 = (JNIEnv *) 0 ;
    LongFilter *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
        arg3 = jenv;
    }
    result = (LongFilter *)new LongFilter(arg1,arg2,arg3);
    
    *(LongFilter **)&jresult = result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI_delete_1LongFilter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    LongFilter *arg1 = (LongFilter *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(LongFilter **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI_LongFilter_1perform(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg4, jlong jarg5) {
    jlong jresult = 0 ;
    LongFilter *arg1 = (LongFilter *) 0 ;
    jchar *arg2 = (jchar *) 0 ;
    int arg3 ;
    int arg4 ;
    jlong arg5 ;
    jlong result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(LongFilter **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (jchar*)jenv->GetStringChars((jstring)jarg2, 0);
            if (!arg2) return 0;
            arg3 = jenv->GetStringLength((jstring)jarg2);
        }
    }
    arg4 = (int)jarg4; 
    arg5 = jarg5; 
    result = (arg1)->perform(arg2,arg3,arg4,arg5);
    
    jresult = result; 
    {
        if (arg2) jenv->ReleaseStringChars((jstring)jarg2, arg2);
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI_LongSerializer_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    LongSerializer *arg1 = (LongSerializer *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    jlong arg3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(LongSerializer **)&jarg1; 
    arg2 = *(FILE **)&jarg2; 
    arg3 = jarg3; 
    (arg1)->write(arg2,arg3);
    
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI_LongSerializer_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    LongSerializer *arg1 = (LongSerializer *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    jlong result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(LongSerializer **)&jarg1; 
    arg2 = *(FILE **)&jarg2; 
    result = (arg1)->read(arg2);
    
    jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI_new_1LongSerializer(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    LongSerializer *result;
    
    (void)jenv;
    (void)jcls;
    result = (LongSerializer *)new LongSerializer();
    
    *(LongSerializer **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_com_lehuen_tst_tstJNI_delete_1LongSerializer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    LongSerializer *arg1 = (LongSerializer *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(LongSerializer **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI_SWIGObjectMemoryStorageUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(memory_storage<jchar,jobject > **)&baseptr = *(ObjectMemoryStorage **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI_SWIGObjectTSTUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(tst<jchar,jobject,ObjectMemoryStorage > **)&baseptr = *(ObjectTST **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI_SWIGObjectActionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(tst_action<jchar,jobject > **)&baseptr = *(ObjectAction **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI_SWIGObjectFilterUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(filter<jchar,jobject > **)&baseptr = *(ObjectFilter **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI_SWIGObjectSerializerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(serializer<jchar,jobject > **)&baseptr = *(ObjectSerializer **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI_SWIGLongTSTUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(tst<jchar,jlong,java_long_memory_storage > **)&baseptr = *(LongTST **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI_SWIGLongActionUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(tst_action<jchar,jlong > **)&baseptr = *(LongAction **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI_SWIGLongFilterUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(filter<jchar,jlong > **)&baseptr = *(LongFilter **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_com_lehuen_tst_tstJNI_SWIGLongSerializerUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(serializer<jchar,jlong > **)&baseptr = *(LongSerializer **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

